"""
You are given a string s consisting of n characters which are either 'X' or 'O'.
A move is defined as selecting three consecutive characters of s and converting them to 'O'.
Note that if a move is applied to the character 'O', it will stay the same.
Return the minimum number of moves required so that all the characters of s are converted to 'O'.

s = 'XXXXXO'

def minimumMoves(self, s: str) -> int:
    count=i=0
    while i<len(s):
        if s[i]=="X":
            count+=1
            i+=3
        else:
            i+=1
    return count
"""

"""
You have observations of n + m 6-sided dice rolls with each face numbered from 1 to 6. 
n of the observations went missing and you only have the observations of m rolls.
Fortunately, you have also calculated the average value of the n + m rolls.
You are given an integer array rolls of length m where rolls[i] is the value of the ith observation.
You are also given the two integers mean and n.
Return an array of length n containing the missing observations such that 
the average value of the n + m rolls is exactly mean. 
If there are multiple valid answers, return any of them. If no such array exists, return an empty array.
The average value of a set of k numbers is the sum of the numbers divided by k.
Note that mean is an integer, so the sum of the n + m rolls should be divisible by n + m.


def missingRolls(self, rolls: List[int], mean: int, n: int) -> List[int]:
    # rolls = [1, 5, 6]
    # mean = 3
    # n = 4
    rollsSum = sum(rolls)
    lenRolls = len(rolls)
    totLen = lenRolls + n
    print(totLen)

    rhs = totLen * mean
    print(rhs)

    rhs -= rollsSum
    print("updated rhs", rhs)

    # newN = [ ]
    # i = 0

    part, rem = divmod(rhs, n)
    print("part is", part)
    print("rem is", rem)
    ans = [part] * n
    for i in range(rem):
        ans[i] += 1

    print(ans)
    return ans
"""

